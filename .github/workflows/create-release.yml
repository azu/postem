name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '22'
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        # Calculate new version to use as target for release notes
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "${{ inputs.version_type }}" = "major" ]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1) "." 0 "." 0}')
        elif [ "${{ inputs.version_type }}" = "minor" ]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1 "." ($2+1) "." 0}')
        else # patch
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1 "." $2 "." ($3+1)}')
        fi
        
        # Generate release notes using GitHub API
        if [ -z "$LATEST_TAG" ]; then
          # If no previous tag exists, generate notes from first commit
          FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
          CHANGELOG=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="v${NEW_VERSION}" \
            -f target_commitish="${{ github.sha }}" \
            -f previous_tag_name="" \
            --jq '.body')
        else
          CHANGELOG=$(gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="v${NEW_VERSION}" \
            -f target_commitish="${{ github.sha }}" \
            -f previous_tag_name="$LATEST_TAG" \
            --jq '.body')
        fi
        
        # Save changelog to environment
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "NEW_VERSION_NUMBER=$NEW_VERSION" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create release branch and update version
      run: |
        # Configure git
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create a new branch for the release
        RELEASE_BRANCH="release/$(date +%Y%m%d-%H%M%S)"
        git checkout -b $RELEASE_BRANCH
        
        # Update version using npm version
        NEW_VERSION=$(npm version ${{ inputs.version_type }} --git-tag-version=false)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
        
        # Commit the version change
        git add package.json
        git commit -m "chore: bump version to $NEW_VERSION"
        
        # Push the release branch
        git push origin $RELEASE_BRANCH
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7.0.5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ env.RELEASE_BRANCH }}
        title: "Release ${{ env.NEW_VERSION }}"
        body: |
          # Release ${{ env.NEW_VERSION }}
          
          ${{ env.CHANGELOG }}
          
          ---
          
          **Release Type:** ${{ inputs.version_type }} update
          
          **Note:** This PR will trigger a release when merged to master.
        base: master
        labels: |
          Type: Release